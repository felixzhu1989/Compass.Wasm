@page "/mainplan/bind/{Id}"
@inject IMainPlanService MainPlanService
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>主计划绑定项目</PageTitle>

<span>@_mainPlanDto.Number-@_mainPlanDto.Name</span>

<EditForm class="mt-3" Model="_mainPlanDto" OnSubmit="Save">
    <div class="input-group mb-2">
        <span class="input-group-text">搜索</span>
        <input class="form-control" placeholder="Search" @bind-value="@_search" @oninput="@Search" />
    </div>
    @if (_filterProject.Count!=0)
    {
        <fieldset>
            <legend>请选择需要绑定的项目:</legend>
            @foreach (var project in _filterProject)
            {
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="projects" @bind-value="@project.Id" @oninput="Checked">
                    <label class="form-check-label" >
                        @project.OdpNumber - @project.Name
                    </label>
                </div>
            }
        </fieldset>
    }
    else
    {
        <span>...</span>
    }
    
    <CompSaveCancelButtons CancelUrl="" />
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }
    private MainPlanDto? _mainPlanDto = new();

    private string _search = string.Empty;
    private List<ProjectDto>? _projects = new();
    private List<ProjectDto> _filterProject = new();
    protected override async Task OnInitializedAsync()
    {
        var result = await MainPlanService.GetFirstOrDefault(Guid.Parse(Id));
        _mainPlanDto = result.Result;

        var projResult = await ProjectService.GetAllAsync();
        _projects = projResult.Result;
        Search(new ChangeEventArgs { Value = "" });
    }


    public async Task Save()
    {
        if (_mainPlanDto!.ProjectId==null||_mainPlanDto!.ProjectId==Guid.Empty)
        {
            await JsRuntime.InvokeVoidAsync("alert", "请选择项目");
            return;
        }
        var result = await MainPlanService.UpdateStatusesAsync(Guid.Parse(Id), _mainPlanDto);
        if (result.IsSuccessStatusCode) NavigationManager.NavigateTo("");
    }
    private void Search(ChangeEventArgs e)
    {
        _search=e.Value!.ToString()!;
        _filterProject.Clear();
        _filterProject = _projects!.Where(x => string.IsNullOrEmpty(_search)||x.OdpNumber!.Contains(_search, StringComparison.OrdinalIgnoreCase)|| x.Name!.Contains(_search, StringComparison.OrdinalIgnoreCase)||(x.SpecialNotes!=null &&x.SpecialNotes.Contains(_search, StringComparison.OrdinalIgnoreCase))).ToList();
    }

    private void Checked(ChangeEventArgs e)
    {
        var id = Guid.Parse(e.Value!.ToString()!);
        _mainPlanDto!.ProjectId = id;
    }
}
