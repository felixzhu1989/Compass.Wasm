@using Compass.Wasm.Shared.CategoryService
@inject HttpClient Http
@inject IJSRuntime JsRuntime
<div class="row">
    <div class="col input-group mb-2">
        <span class="input-group-text">事业部</span>
        <select class="form-select" @onchange="OnSbuChange">
            @foreach (var sbu in Enum.GetNames(typeof(Sbu)))
            {
                <option>@sbu</option>
            }
        </select>
    </div>
    <div class="col input-group mb-2">
        <span class="input-group-text">产品</span>
        <select class="form-select" @onchange="OnProductChange">
            @if (products !=null)
            {
                foreach (var product in products)
                {
                    <option value="@product.Id">@product.Name</option>
                }
            }
        </select>
    </div>
    <div class="col input-group mb-2">
        <span class="input-group-text">模型</span>
        <select class="form-select" @onchange="OnModelChange">
            @if (models !=null)
            {
                foreach (var model in models)
                {
                    <option value="@model.Id">@model.Name</option>
                }
            }
        </select>
        <span class="input-group-text">@ModelId</span>
    </div>
</div>

@code {
    [Parameter]
    public string ModelId { get; set; }
    [Parameter]
    public EventCallback<string> ModelIdChanged { get; set; }


    private ProductResponse[]? products;
    private ModelResponse[]? models;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        products=await Http.GetFromJsonAsync<ProductResponse[]>("api/Product/All/0");
        models = await Http.GetFromJsonAsync<ModelResponse[]>($"api/Model/All/{products.First().Id}");
        await Refresh();
    }

    async Task Refresh()
    {
        if (products != null && products.Length != 0 && models != null && models.Length != 0)
        {
            ModelId =models.First().Id.ToString();
            await ModelIdChanged.InvokeAsync(ModelId);
        }
    }

    async Task OnSbuChange(ChangeEventArgs e)
    {
        //await JsRuntime.InvokeVoidAsync("alert", $"您选择了{e.Value}");
        products=await Http.GetFromJsonAsync<ProductResponse[]>($"api/Product/All/{e.Value:int}");
        if (products != null && products.Length != 0)
        {
            models = await Http.GetFromJsonAsync<ModelResponse[]>($"api/Model/All/{products.First().Id}");
        }
        await Refresh();
    }

    async Task OnProductChange(ChangeEventArgs e)
    {
        //await JsRuntime.InvokeVoidAsync("alert", $"您选择了{e.Value}");
        models=await Http.GetFromJsonAsync<ModelResponse[]>($"api/Model/All/{e.Value}");
        await Refresh();
    }

    async Task OnModelChange(ChangeEventArgs e)
    {
        //await JsRuntime.InvokeVoidAsync("alert", $"您选择了{e.Value}");
        ModelId =e.Value!.ToString()!;
        await ModelIdChanged.InvokeAsync(ModelId);
    }
}
