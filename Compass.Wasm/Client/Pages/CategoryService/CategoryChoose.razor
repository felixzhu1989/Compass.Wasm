@inject HttpClient Http
@inject IJSRuntime JsRuntime
<div class="row">
    <div class="col input-group mb-2" style="width: 100px">
        <span class="input-group-text">①事业部</span>
        <select class="form-select" value="@_categoryResponse.Sbu" @onchange="OnSbuChange">
            @foreach (var sbu in Enum.GetNames(typeof(Sbu)))
            {
                <option>@sbu</option>
            }
        </select>
    </div>
    <div class="col input-group mb-2">
        <span class="input-group-text">②产品</span>
        <select class="form-select" value="@_categoryResponse.ProductId" @onchange="OnProductChange">
            @if (_products !=null)
            {
                foreach (var product in _products)
                {
                    <option value="@product.Id">@product.Name</option>
                }
            }
        </select>
    </div>
    <div class="col input-group mb-2">
        <span class="input-group-text">③模型</span>
        <select class="form-select" value="@_categoryResponse.ModelId" @onchange="OnModelChange">
            @if (_models !=null)
            {
                foreach (var model in _models)
                {
                    <option value="@model.Id">@model.Name</option>
                }
            }
        </select>
    </div>
    
    <div class="col input-group mb-2">
        <span class="input-group-text">④子类型</span>
        @*https://www.itbaoku.cn/post/2252439.html*@
        <select class="form-select" value="@ModelTypeId" @onchange="OnModelTypeChange">
            @if (_modelTypes !=null)
            {
                foreach (var modelType in _modelTypes)
                {
                    <option value="@modelType.Id">@modelType.Name</option>
                }
            }
        </select>
    </div>

    <div class="col"><span class="input-group-text">@_categoryResponse.Description</span></div>
</div>

@code {
    [Parameter]
    public string? ModelTypeId { get; set; }
    [Parameter]
    public EventCallback<string> ModelTypeIdChanged { get; set; }

    private List<ProductResponse>? _products;
    private List<ModelResponse>? _models;
    private List<ModelTypeResponse>? _modelTypes;
    private CategoryResponse? _categoryResponse=new();

    protected override async Task OnInitializedAsync()
    {
        if (ModelTypeId!=null)
        {
            _categoryResponse = await Http.GetFromJsonAsync<CategoryResponse>($"api/ModelType/Category/{ModelTypeId}");
            //todo:此时product变更了，没有引起ModelType列表更新（一连串的变更），解决办法，先查询列表再赋值更新
            await GetProducts(_categoryResponse!.Sbu);
            await GetModels(_categoryResponse.ProductId.ToString());
            await GetModelTypes(_categoryResponse.ModelId.ToString());

            await ModelTypeIdChanged.InvokeAsync(ModelTypeId);
        }
        else
        {
            await GetProducts(Sbu.FS);
            await GetModels(_products!.First().Id.ToString());
            await GetModelTypes(_models!.First().Id.ToString());
            await InitModelType();
        }
    }

    async Task InitModelType()
    {
        if (_products != null && _products.Count != 0 
            && _models != null && _models.Count != 0
            && _modelTypes != null && _modelTypes.Count != 0)
        {
            ModelTypeId =_modelTypes.First().Id.ToString();
            _categoryResponse!.Description = _modelTypes.First().Description;
            await ModelTypeIdChanged.InvokeAsync(ModelTypeId);
        }
    }
    async Task GetProducts(Sbu sbu)
    {
        _products=await Http.GetFromJsonAsync<List<ProductResponse>>($"api/Product/All/{sbu}");
    }
    async Task GetModels(string productId)
    {
        _models = await Http.GetFromJsonAsync<List<ModelResponse>>($"api/Model/All/{productId}");
    }
    async Task GetModelTypes(string modelId)
    {
        _modelTypes = await Http.GetFromJsonAsync<List<ModelTypeResponse>>($"api/ModelType/All/{modelId}");
    }

    async Task OnSbuChange(ChangeEventArgs e)
    {
        _products=await Http.GetFromJsonAsync<List<ProductResponse>>($"api/Product/All/{e.Value:int}");

        if (_products != null && _products.Count != 0)
        {
            await GetModels(_products!.First().Id.ToString());            
            if (_models != null && _models.Count != 0)
            {
                await GetModelTypes(_models!.First().Id.ToString());
            }
        }
        await InitModelType();
    }
    async Task OnProductChange(ChangeEventArgs e)
    {
        await GetModels(e.Value!.ToString()!);
        if (_models != null && _models.Count != 0)
        {
            await GetModelTypes(_models!.First().Id.ToString());
        }
        await InitModelType();
    }
    async Task OnModelChange(ChangeEventArgs e)
    {
        await GetModelTypes(e.Value!.ToString()!);
        await InitModelType();
    }
    async Task OnModelTypeChange(ChangeEventArgs e)
    {
        ModelTypeId =e.Value!.ToString()!;
        _categoryResponse!.Description = _modelTypes!.Find(x => x.Id.Equals(Guid.Parse(e.Value.ToString()!)))?.Description!;
        await ModelTypeIdChanged.InvokeAsync(ModelTypeId);
    }
}
