@inject HttpClient Http
@inject IJSRuntime JsRuntime
<div class="row">
    <div class="col input-group mb-2">
        <span class="input-group-text">①相关方</span>
        <select class="form-select" value="@_problemType.Stakeholder" @onchange="OnStakeholderChange">
            @foreach (var stakeholder in Enum.GetNames(typeof(Stakeholder)))
            {
                <option>@stakeholder</option>
            }
        </select>
    </div>
    <div class="col input-group mb-2">
        <span class="input-group-text">②异常类型</span>
        <select class="form-select" value="@ProblemTypeId" @onchange="OnProblemTypeChange">
            @if (_problemTypes !=null)
            {
                foreach (var problemType in _problemTypes)
                {
                    <option value="@problemType.Id">@problemType.Name</option>
                }
            }
        </select>
    </div>
    <div class="col"><span class="input-group-text">@ProblemTypeId</span></div>
</div>
@code {
    [Parameter]
    public string ProblemTypeId { get; set; }
    [Parameter]
    public EventCallback<string> ProblemTypeIdChanged { get; set; }

    private List<ProblemTypeResponse>? _problemTypes;
    private ProblemTypeResponse? _problemType=new ();
    protected override async Task OnInitializedAsync()
    {
        _problemTypes=await Http.GetFromJsonAsync<List<ProblemTypeResponse>>($"api/ProblemType/All/0");
        if (string.IsNullOrWhiteSpace(ProblemTypeId))
        {
            await Refresh();
        }
        else
        {
            await ProblemTypeIdChanged.InvokeAsync(ProblemTypeId);
            _problemType = await Http.GetFromJsonAsync<ProblemTypeResponse>($"api/ProblemType/{ProblemTypeId}");
            //todo:此时sbu变更了，没有引起，列表更新（一连串的变更）

        }
    }

    async Task Refresh()
    {
        if (_problemTypes != null && _problemTypes.Count != 0)
        {
            ProblemTypeId =_problemTypes.First().Id.ToString();
            await ProblemTypeIdChanged.InvokeAsync(ProblemTypeId);
        }
    }
    
    async Task OnStakeholderChange(ChangeEventArgs e)
    {
        //await JsRuntime.InvokeVoidAsync("alert", $"您选择了{e.Value}");
        _problemTypes=await Http.GetFromJsonAsync<List<ProblemTypeResponse>>($"api/ProblemType/All/{e.Value:int}");
        await Refresh();
    }
    async Task OnProblemTypeChange(ChangeEventArgs e)
    {
        //await JsRuntime.InvokeVoidAsync("alert", $"您选择了{e.Value}");
        ProblemTypeId =e.Value!.ToString()!;
        await ProblemTypeIdChanged.InvokeAsync(ProblemTypeId);
    }
}
