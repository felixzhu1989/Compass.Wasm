@page "/projects"
@using Compass.Wasm.Client.Services.Projects
@using Compass.Wasm.Shared.Projects
@inject NavigationManager NavigationManager
@inject IProjectService ProjectService
<PageTitle>项目列表</PageTitle>
<!--sticky固定位置，top: 3.5rem-->
<div style="position: sticky; top: 3.5rem; z-index: 1;background-color:White">
    <div class="row position-relative">
        <div class="col input-group mb-2">
            <span class="input-group-text">搜索</span>
            <input class="form-control" placeholder="Search" @bind-value="@_search" @oninput="@Search" />
        </div>
        <div class="col mt-2">
            @if (_filterProject != null)
            {
                <span>总项目数:@_filterProject.Count</span>
            }
        </div>
        @*todo:控制权限*@
        <AuthorizeView Roles="admin,pm">
            <Authorized>
                <div class="col position-absolute bottom-0 end-0" style="text-align: right; width: 10%">
                    <button class="btn btn-outline-danger mb-2" @onclick="@(() => NavigationManager.NavigateTo("project/add"))">+ 添加</button>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>
</div>

<table class="table table-hover" style="table-layout: fixed; word-break: break-all;">
    <!--sticky固定位置，top: 6rem-->
    <thead style="position: sticky; top: 6rem; z-index: 1; background-color: White">
    <tr>
        <th style="width: 10%">项目编号</th>
        <th style="width: 35%">项目名称</th>
        <th style="text-align: center">项目分类</th>
        <th style="text-align: center">风险等级</th>
        <th style="text-align: center">合同</th>
        <th style="text-align: center">领料单</th>
        <th style="text-align: center">特殊要求</th>
    </tr>
    </thead>
    <tbody>
    @if (_filterProject.Count == 0)
    {
        <p>...</p>
    }
    else
    {
        @foreach (var project in _filterProject)
        {
            <ProjectRow Project="project"/>
        }
    }
    </tbody>
</table>

@code {
    private string _search = string.Empty;
    private List<ProjectDto> _projects = new();
    private List<ProjectDto> _filterProject = new();
    protected override async Task OnParametersSetAsync()
    {
        var result = await ProjectService.GetAllAsync();
        _projects = result.Result;
        Search(new ChangeEventArgs { Value = "" });
    }

    private void Search(ChangeEventArgs e)
    {
        _search=e.Value!.ToString()!;
        _filterProject.Clear();
        _filterProject = _projects.Where(x => string.IsNullOrEmpty(_search)||x.OdpNumber.Contains(_search, StringComparison.OrdinalIgnoreCase)|| x.Name.Contains(_search, StringComparison.OrdinalIgnoreCase)||(x.SpecialNotes!=null &&x.SpecialNotes.Contains(_search, StringComparison.OrdinalIgnoreCase))).ToList();
    }
}
