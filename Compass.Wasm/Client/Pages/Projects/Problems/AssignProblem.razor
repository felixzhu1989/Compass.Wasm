@page "/assignproblem/{Id}"
@using Compass.Wasm.Shared.Identities
@using Compass.Wasm.Shared.Projects

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Assign Problem</PageTitle>
<span class="fs-5">指派负责人</span>
@if (problem != null)
{
    <EditForm Model="problem" OnSubmit="Save">
        <div class="input-group mb-2">
            <span class="input-group-text">截止日期</span>
            <input type="date" class="form-control" style="color: red" @bind-value="@problem.Deadline" />
        </div>

        @if (responders!=null)
        {
            <div class="input-group mb-2">
                <span class="input-group-text">负责人</span>
                <select class="form-select" @bind="@selectedUserId">
                    @foreach (var user in responders)
                    {
                        <option value="@user.Id">@user.UserName</option>
                    }
                </select>
            </div>
        }

        <button class="btn btn-success" type="submit">保存</button>
        <button class="btn btn-secondary" type="button" @onclick="@(() => NavigationManager.NavigateTo($"./reportproblem/{problem.ProjectId}"))">取消</button>
    </EditForm>
}


@code {
    [Parameter]
    public string Id { get; set; }
    private ProblemResponse? problem=new();
    private Guid selectedUserId;
    private List<UserDto>? responders=new();

    protected override async Task OnParametersSetAsync()
    {
        problem=await Http.GetFromJsonAsync<ProblemResponse>($"api/Problem/{Id}");
        problem!.Deadline ??= DateTime.Today;
        responders = await Http.GetFromJsonAsync<List<UserDto>>("api/UserAdmin/AllUsers");
        if (problem.ResponseUserId != null && !problem.ResponseUserId.Equals(Guid.Empty))
        {
            selectedUserId = problem.ResponseUserId.Value;
        }
    }

    private async Task Save()
    {
        if (selectedUserId.Equals(Guid.Empty))
        {
            await JsRuntime.InvokeVoidAsync("alert", "请选择负责人");
            return;
        }
        problem.ResponseUserId = selectedUserId;
        var result = await Http.PutAsJsonAsync($"api/Problem/Responder/{Id}", problem);
        if (result.IsSuccessStatusCode) NavigationManager.NavigateTo($"./reportproblem/{problem.ProjectId}");
    }

}
