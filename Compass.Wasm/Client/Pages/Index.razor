@page "/"
@page "/{CurrentPage:int}"
@page "/search/{SearchText}/{CurrentPage:int}"
@using Compass.Wasm.Client.Pages.ProjectService.Tracking
@using System.Timers

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@implements IDisposable

<PageTitle>Project Tracking</PageTitle>

<table class="table table-hover" style="table-layout: fixed;word-break:break-all;">
    <thead>
        <tr>
            <th style="width: 60px;text-align: center">状态</th>
            <th style="width: 10%">项目编号</th>
            <th style="width: 30%">项目名称</th>
            <th style="text-align: center">开始</th>
            <th style="text-align: center">计划</th>
            <th style="text-align: center">发图</th>
            <th style="text-align: center">生产</th>
            <th style="text-align: center">入库</th>
            <th style="text-align: center">发货S</th>
            <th style="text-align: center">发货E</th>
            <th style="text-align: center">结束</th>
            <th style="text-align: center">报告异常</th>
            <th style="text-align: center">经验教训</th>
        </tr>
    </thead>
    <tbody>
        @if (trackings == null)
        {
            <p>加载中...</p>
        }
        else if (trackings.Count == 0)
        {
            <p>未找到</p>
        }
        else
        {
            @foreach (var tracking in trackings)
            {
                <DisplayTracking Tracking="tracking" />
            }
        }
    </tbody>
</table>
@if (SearchText != null)
{
    @for (int i = 1; i <= PageCount; i++)
    {
        <a class="btn @(i==CurrentPage?"btn-info":"btn-outline-info")"
   style="margin-right: 15px;margin-bottom: 30px;"
   href="/search/@LastSearchText/@i">@i</a>
    }
}
else
{
    @for (int i = 1; i <= PageCount; i++)
    {
        <a class="btn @(i==CurrentPage?"btn-info":"btn-outline-info")"
   style="margin-right: 15px;margin-bottom: 30px;"
   href="/@i">@i</a>
    }
}

@code {
    [Parameter]
    public string SearchText { get; set; }
    [Parameter]
    public int CurrentPage { get; set; } = 1;
    public int PageCount { get; set; } = 0;
    public string LastSearchText { get; set; } = string.Empty;

    private List<TrackingResponse> trackings = new();

    private Timer timer;

    protected override void OnInitialized()
    {
        timer = new Timer();
        timer.Interval = 10000;
        timer.Elapsed += OnTimeElapsed;//每隔30s钟就会执行一次这个方法
        timer.Enabled = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshData();
    }

    async Task RefreshData()
    {
        //刷新数据
        PaginationResult<List<TrackingResponse>>? result = new();
        if (SearchText != null)
        {
            LastSearchText = SearchText;//查询字符串
            result = await Http.GetFromJsonAsync<PaginationResult<List<TrackingResponse>>>($"api/Tracking/search/{SearchText}/{CurrentPage}");
        }
        else
        {
            if (CurrentPage == 0) CurrentPage = 1;
            result = await Http.GetFromJsonAsync<PaginationResult<List<TrackingResponse>>>($"api/Tracking/All/{CurrentPage}");
        }

        CurrentPage = result!.CurrentPage;
        PageCount = result.Pages;
        trackings= result.Data!;
    }

    private async void OnTimeElapsed(object? sender, ElapsedEventArgs e)
    {
        //每一次timer，当前页码加一，如果大于总页数则返回第一页
        if (PageCount > 1)
        {
            CurrentPage ++;
            if (CurrentPage> PageCount) CurrentPage = 1;
        }
        await RefreshData();
        await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        timer.Dispose();
    }
}