@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="row">
    <div class="col-md-1 d-flex justify-content-center align-items-center time-line">
        <span class="badge rounded-pill @(totalDrawingsCount == 0 ? "bg-dark" : notAssignedDrawingsCount != 0 ? "bg-danger" : DrawingPlan.ReleaseTime < DateTime.Today ? "bg-success" : "bg-warning text-dark")  ">
            @DrawingPlan.ReleaseTime.ToString("yyyy-MM-dd")
        </span>
    </div>
    @if (project != null)
    {
        <div class="col-md-11 rounded-3 mb-2">
            <div class="card rounded-3 border-0 shadow-sm my-0">
                <div class="card-body">
                    <h6 class="card-title">
                        <div class="row">
                            <div class="col">
                                <a href="./updatedrawingplan/@DrawingPlan.Id">@project.OdpNumber</a>
                                <span class="fs-6">@project.Name</span>
                            </div>
                            <div class="col">
                                @if (totalDrawingsCount != 0)
                                {
                                    <span class="badge bg-light text-black">Item总数 @totalDrawingsCount</span>
                                }
                                else
                                {
                                    <span class="badge bg-dark">未添加图纸</span>
                                }
                                @if (notAssignedDrawingsCount != 0)
                                {
                                    <span class="badge bg-danger">未分配 @notAssignedDrawingsCount</span>
                                }
                            </div>
                        </div>
                    </h6>
                    <p class="card-text">
                        <div class="row">
                            <div class="col">
                                @if (assignedDrawingsSummary.Any())
                                {
                                    @foreach (var d in assignedDrawingsSummary)
                                    {
                                        <a href="/userdrawinglist/@d.Key">
                                            <span style="font-weight: bold">@d.Key :</span>
                                        </a>
                                        <span class="me-2">@d.Value </span>
                                        <br />
                                    }
                                }

                            </div>
                            <div class="col">
                                <span class="badge bg-light text-black">工作量 @(Math.Round(totalWorkload,1))</span>
                                <span class="badge bg-light text-black ms-1">@modelSummary</span>
                            </div>
                        </div>

                    </p>
                </div>
            </div>
        </div>
    }
</div>
@code {
    [Parameter]
    public DrawingPlanResponse DrawingPlan { get; set; }

    private ProjectDto? project;
    private int totalDrawingsCount;
    private int notAssignedDrawingsCount;

    double totalWorkload;
    string? modelSummary;

    Dictionary<string, string> assignedDrawingsSummary = new();

    protected override async Task OnParametersSetAsync()
    {
        var projectResponse = await Http.GetFromJsonAsync<ApiResponse<ProjectDto>>($"api/Project/{DrawingPlan.Id}");
        if (projectResponse.Status) project = projectResponse.Result;

        totalDrawingsCount = await Http.GetFromJsonAsync<int>($"api/Drawing/Total/{DrawingPlan.Id}");
        notAssignedDrawingsCount = await Http.GetFromJsonAsync<int>($"api/Drawing/NotAssigned/{DrawingPlan.Id}");

        await GetProjectWorkload();
        await GetDrawingsAssigned();
    }
    
    private async Task GetProjectWorkload()
    {
        Dictionary<string, int> modelCount = new Dictionary<string, int>();//统计模型个数
        List<string> modelList = new();
        totalWorkload = 0d;
        var modules = await Http.GetFromJsonAsync<List<ModuleDto>>($"api/Module/Project/{DrawingPlan.Id}");
        if (modules==null) return;
        foreach (var module in modules)
        {
            var modelType = await Http.GetFromJsonAsync<ModelTypeDto>($"api/ModelType/{module.ModelTypeId}");
            var model = await Http.GetFromJsonAsync<ModelDto>($"api/Model/{modelType.ModelId}");
            if (modelCount.ContainsKey(model!.Name)) modelCount[model.Name] += 1;
            else modelCount.Add(model.Name, 1);

            totalWorkload += model.Workload;//最终显示时只保留一位小数
        }
        foreach (var d in modelCount)
        {
            modelList.Add($"{d.Key}:{d.Value}");
        }
        modelSummary = string.Join('、', modelList);
    }
    
    private async Task GetDrawingsAssigned()
    {
        assignedDrawingsSummary.Clear();
        var dic = await Http.GetFromJsonAsync<Dictionary<Guid, DrawingDto[]>>($"api/DrawingPlan/DrawingsAssigned/{DrawingPlan.Id}");
        foreach (var d in dic)
        {
            var user = await Http.GetFromJsonAsync<UserDto>($"api/UserAdmin/{d.Key}");
            List<string> itemNumbers = new List<string>();
            foreach (var r in d.Value)
            {
                itemNumbers.Add(r.ItemNumber);
            }
            if (assignedDrawingsSummary.ContainsKey(user.UserName))
            {
                assignedDrawingsSummary[user.UserName] = string.Join(',', itemNumbers);
            }
            else
            {
                assignedDrawingsSummary.Add(user.UserName, string.Join(',', itemNumbers));
            }
        }
    }
}
